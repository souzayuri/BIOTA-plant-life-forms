arrange(prop) # organizada em ordem
#textclean::drop_row("bolean", "FALSE") # remove tudo oque for FALSE da coluna bolean
listaspcclf
rm(list = ls())
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,23:24] <- lapply(ttlplt[,23:24], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt <- ttlplt %>%
filter(Treatment == "closed")
#### Para todas as especies
ttlpltlf <- table(ttlplt$Species,ttlplt$`Life Form`) #converse a coluna de forma de vida em uma matriz,
#junto com as espécies, mostrando qual espécies pertence a quais grupos de vida
ttlpltlf
### precisa fazer esse processo abaixo para poder converter a tabela a cima em uma formato lido pelo tidyverse (tibble)
write.csv(ttlpltlf , "teste_7-4-19.csv", row.names = TRUE, quote = TRUE) # Salva em uma tabela
ttlpltlf  <- read_csv("teste_7-4-19.csv") # carrega essa tabela.
ttlpltlf
unlink("teste_7-4-19.csv") # deleta a tabela da pasta
listaspcc <- ttlpltlf  %>%
gather(key = "lifeform", value = "freq", 2:8) %>%
filter(lifeform == "tree")#coloca todas as colunas da matriz em uma unica
listaspcc
names(listaspcc)[1] <- "Species" # da o cabeçario de Species para a coluna X1
listaspcclf.c <- listaspcc %>%
dplyr::filter(!grepl("cf.$", Species)) %>% # remover os cf. que estejam no final do nome
textclean::drop_row("Species", c("sp.","Rubiaceae", "Myrtaceae")) %>% # remove os 3 elementos listados
filter(`freq` > 0) %>% # remove as espécies que foram preenchidas por outro grupo funcional
# e mantém só aquelas que estão representadas pelo grupo funcional correto
mutate(prop = ((freq*100))/sum(freq)) %>% #faz um calculo de proporção de individuos por spp e salva em uma coluna
mutate(bolean = prop >= 1) %>% # preenche uma coluna com oque está acima de 1% de contribuição
arrange(prop) # organizada em ordem
#textclean::drop_row("bolean", "FALSE") # remove tudo oque for FALSE da coluna bolean
listaspcclf.c
View(listaspcclf.c)
sum(listaspcclf.c$freq)
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,23:24] <- lapply(ttlplt[,23:24], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt <- ttlplt %>%
filter(Treatment == "open")
#### Para todas as especies
ttlpltlf <- table(ttlplt$Species,ttlplt$`Life Form`) #converse a coluna de forma de vida em uma matriz,
#junto com as espécies, mostrando qual espécies pertence a quais grupos de vida
ttlpltlf
### precisa fazer esse processo abaixo para poder converter a tabela a cima em uma formato lido pelo tidyverse (tibble)
write.csv(ttlpltlf , "teste_7-4-19.csv", row.names = TRUE, quote = TRUE) # Salva em uma tabela
ttlpltlf  <- read_csv("teste_7-4-19.csv") # carrega essa tabela.
ttlpltlf
unlink("teste_7-4-19.csv") # deleta a tabela da pasta
listaspcc <- ttlpltlf  %>%
gather(key = "lifeform", value = "freq", 2:8) %>%
filter(lifeform == "tree")#coloca todas as colunas da matriz em uma unica
listaspcc
names(listaspcc)[1] <- "Species" # da o cabeçario de Species para a coluna X1
listaspcclf <- listaspcc %>%
dplyr::filter(!grepl("cf.$", Species)) %>% # remover os cf. que estejam no final do nome
textclean::drop_row("Species", c("sp.","Rubiaceae", "Myrtaceae")) %>% # remove os 3 elementos listados
filter(`freq` > 0) %>% # remove as espécies que foram preenchidas por outro grupo funcional
# e mantém só aquelas que estão representadas pelo grupo funcional correto
mutate(prop = ((freq*100))/sum(freq)) %>% #faz um calculo de proporção de individuos por spp e salva em uma coluna
mutate(bolean = prop >= 1) %>% # preenche uma coluna com oque está acima de 1% de contribuição
arrange(prop) # organizada em ordem
#textclean::drop_row("bolean", "FALSE") # remove tudo oque for FALSE da coluna bolean
listaspcclf
sum(listaspcclf$freq)
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,23:24] <- lapply(ttlplt[,23:24], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt <- ttlplt %>%
filter(Treatment == "open")
ttlplt
View(ttlplt)
ttlpltlf <- table(ttlplt$Species,ttlplt$`Life Form`) #converse a coluna de forma de vida em uma matriz,
#junto com as espécies, mostrando qual espécies pertence a quais grupos de vida
ttlpltlf
### precisa fazer esse processo abaixo para poder converter a tabela a cima em uma formato lido pelo tidyverse (tibble)
write.csv(ttlpltlf , "teste_7-4-19.csv", row.names = TRUE, quote = TRUE) # Salva em uma tabela
ttlpltlf  <- read_csv("teste_7-4-19.csv") # carrega essa tabela.
ttlpltlf
unlink("teste_7-4-19.csv") # deleta a tabela da pasta
ttlpltlf
View(ttlplt)
ttlpltlf
ttlpltlf
listaspcc <- ttlpltlf  %>%
gather(key = "lifeform", value = "freq", 2:8) %>%
filter(lifeform == "tree")#coloca todas as colunas da matriz em uma unica
listaspcc
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,23:24] <- lapply(ttlplt[,23:24], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt <- ttlplt %>%
filter(Treatment == "open")
ttlplt
View(ttlplt)
rm(list = ls())
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,6:21,23:24] <- lapply(ttlplt[,6:21,23:24], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt <- ttlplt %>%
filter(Treatment == "open")
ttlplt
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,6:21,23:24] <- lapply(ttlplt[,6:21,23:24], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt[,c(6:21,23:24)] <- lapply(ttlplt[,c(6:21,23:24)], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt <- ttlplt %>%
filter(Treatment == "open")
ttlplt
?lapply
ttlplt
lapply
ttlplt
ttlplt <- ttlplt %>%
filter(Treatment == "open")
ttlplt
ttlpltlf <- table(ttlplt$Species,ttlplt$`Life Form`) #converse a coluna de forma de vida em uma matriz,
#junto com as espécies, mostrando qual espécies pertence a quais grupos de vida
ttlpltlf
### precisa fazer esse processo abaixo para poder converter a tabela a cima em uma formato lido pelo tidyverse (tibble)
write.csv(ttlpltlf , "teste_7-4-19.csv", row.names = TRUE, quote = TRUE) # Salva em uma tabela
ttlpltlf  <- read_csv("teste_7-4-19.csv") # carrega essa tabela.
ttlpltlf
unlink("teste_7-4-19.csv") # deleta a tabela da pasta
listaspcc <- ttlpltlf  %>%
gather(key = "lifeform", value = "freq", 2:8) %>%
filter(lifeform == "tree")#coloca todas as colunas da matriz em uma unica
listaspcc
names(listaspcc)[1] <- "Species" # da o cabeçario de Species para a coluna X1
listaspcclf <- listaspcc %>%
dplyr::filter(!grepl("cf.$", Species)) %>% # remover os cf. que estejam no final do nome
textclean::drop_row("Species", c("sp.","Rubiaceae", "Myrtaceae")) %>% # remove os 3 elementos listados
filter(`freq` > 0) %>% # remove as espécies que foram preenchidas por outro grupo funcional
# e mantém só aquelas que estão representadas pelo grupo funcional correto
mutate(prop = ((freq*100))/sum(freq)) %>% #faz um calculo de proporção de individuos por spp e salva em uma coluna
mutate(bolean = prop >= 1) %>% # preenche uma coluna com oque está acima de 1% de contribuição
arrange(prop) # organizada em ordem
#textclean::drop_row("bolean", "FALSE") # remove tudo oque for FALSE da coluna bolean
listaspcclf
sum(listaspcclf$freq)
View(listaspcclf)
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,c(6:21,23:24)] <- lapply(ttlplt[,c(6:21,23:24)], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt <- ttlplt %>%
filter(Treatment == "closed")
ttlplt
#### Para todas as especies
ttlpltlf <- table(ttlplt$Species,ttlplt$`Life Form`) #converse a coluna de forma de vida em uma matriz,
#junto com as espécies, mostrando qual espécies pertence a quais grupos de vida
ttlpltlf
### precisa fazer esse processo abaixo para poder converter a tabela a cima em uma formato lido pelo tidyverse (tibble)
write.csv(ttlpltlf , "teste_7-4-19.csv", row.names = TRUE, quote = TRUE) # Salva em uma tabela
ttlpltlf  <- read_csv("teste_7-4-19.csv") # carrega essa tabela.
ttlpltlf
unlink("teste_7-4-19.csv") # deleta a tabela da pasta
listaspcc <- ttlpltlf  %>%
gather(key = "lifeform", value = "freq", 2:8) %>%
filter(lifeform == "tree")#coloca todas as colunas da matriz em uma unica
listaspcc
names(listaspcc)[1] <- "Species" # da o cabeçario de Species para a coluna X1
listaspcclf.c <- listaspcc %>%
dplyr::filter(!grepl("cf.$", Species)) %>% # remover os cf. que estejam no final do nome
textclean::drop_row("Species", c("sp.","Rubiaceae", "Myrtaceae")) %>% # remove os 3 elementos listados
filter(`freq` > 0) %>% # remove as espécies que foram preenchidas por outro grupo funcional
# e mantém só aquelas que estão representadas pelo grupo funcional correto
mutate(prop = ((freq*100))/sum(freq)) %>% #faz um calculo de proporção de individuos por spp e salva em uma coluna
mutate(bolean = prop >= 1) %>% # preenche uma coluna com oque está acima de 1% de contribuição
arrange(prop) # organizada em ordem
#textclean::drop_row("bolean", "FALSE") # remove tudo oque for FALSE da coluna bolean
listaspcclf.c
sum(listaspcclf.c$freq)
View(listaspcclf.c)
rm(list = ls())
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,23:24] <- lapply(ttlplt[,23:24], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt <- ttlplt %>%
filter(Treatment == "open")
ttlplt
ttlpltlf <- table(ttlplt$Species,ttlplt$`Life Form`) #converse a coluna de forma de vida em uma matriz,
#junto com as espécies, mostrando qual espécies pertence a quais grupos de vida
ttlpltlf
### precisa fazer esse processo abaixo para poder converter a tabela a cima em uma formato lido pelo tidyverse (tibble)
write.csv(ttlpltlf , "teste_7-4-19.csv", row.names = TRUE, quote = TRUE) # Salva em uma tabela
ttlpltlf  <- read_csv("teste_7-4-19.csv") # carrega essa tabela.
ttlpltlf
unlink("teste_7-4-19.csv") # deleta a tabela da pasta
ttlplt
ttlpltlf <- table(ttlplt$Species,ttlplt$`Life Form`) #converse a coluna de forma de vida em uma matriz,
#junto com as espécies, mostrando qual espécies pertence a quais grupos de vida
ttlpltlf
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,23:24] <- lapply(ttlplt[,23:24], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt <- ttlplt %>%
filter(Treatment == "open")
ttlplt
#### Para todas as especies
ttlpltlf <- table(ttlplt$Species,ttlplt$`Life Form`) #converse a coluna de forma de vida em uma matriz,
#junto com as espécies, mostrando qual espécies pertence a quais grupos de vida
ttlpltlf
### precisa fazer esse processo abaixo para poder converter a tabela a cima em uma formato lido pelo tidyverse (tibble)
write.csv(ttlpltlf , "teste_7-4-19.csv", row.names = TRUE, quote = TRUE) # Salva em uma tabela
ttlpltlf  <- read_csv("teste_7-4-19.csv") # carrega essa tabela.
ttlpltlf
unlink("teste_7-4-19.csv") # deleta a tabela da pasta
listaspcc <- ttlpltlf  %>%
gather(key = "lifeform", value = "freq", 2:8) %>%
filter(lifeform == "tree")#coloca todas as colunas da matriz em uma unica
listaspcc
names(listaspcc)[1] <- "Species" # da o cabeçario de Species para a coluna X1
listaspcclf <- listaspcc %>%
dplyr::filter(!grepl("cf.$", Species)) %>% # remover os cf. que estejam no final do nome
textclean::drop_row("Species", c("sp.","Rubiaceae", "Myrtaceae")) %>% # remove os 3 elementos listados
filter(`freq` > 0) %>% # remove as espécies que foram preenchidas por outro grupo funcional
# e mantém só aquelas que estão representadas pelo grupo funcional correto
mutate(prop = ((freq*100))/sum(freq)) %>% #faz um calculo de proporção de individuos por spp e salva em uma coluna
mutate(bolean = prop >= 1) %>% # preenche uma coluna com oque está acima de 1% de contribuição
arrange(prop) # organizada em ordem
#textclean::drop_row("bolean", "FALSE") # remove tudo oque for FALSE da coluna bolean
listaspcclf
sum(listaspcclf$freq)
colunas <- c("Species", "lifeform", "freq", "prop", "bolean")
todaspp <- data.frame("Others 151 sp. < 1% ...", "Mixed", 1, 1.0, FALSE)
# coloco os valores 1 e 1.0 para ficar localizado no final do gráfico,
#mas os valos corretos seriam 957 individuos representando juntos 22.35%
names(todaspp) <- colunas
listaspcclf <- rbind(listaspcclf,todaspp)
listaspcclf
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,23:24] <- lapply(ttlplt[,23:24], as.numeric) #transforma as colunas 23 e 24 em numerico
ttlplt <- ttlplt %>%
filter(Treatment == "closed")
ttlplt
#### Para todas as especies
ttlpltlf <- table(ttlplt$Species,ttlplt$`Life Form`) #converse a coluna de forma de vida em uma matriz,
#junto com as espécies, mostrando qual espécies pertence a quais grupos de vida
ttlpltlf
### precisa fazer esse processo abaixo para poder converter a tabela a cima em uma formato lido pelo tidyverse (tibble)
write.csv(ttlpltlf , "teste_7-4-19.csv", row.names = TRUE, quote = TRUE) # Salva em uma tabela
ttlpltlf  <- read_csv("teste_7-4-19.csv") # carrega essa tabela.
ttlpltlf
unlink("teste_7-4-19.csv") # deleta a tabela da pasta
listaspcc <- ttlpltlf  %>%
gather(key = "lifeform", value = "freq", 2:8) %>%
filter(lifeform == "tree")#coloca todas as colunas da matriz em uma unica
listaspcc
names(listaspcc)[1] <- "Species" # da o cabeçario de Species para a coluna X1
listaspcclf.c <- listaspcc %>%
dplyr::filter(!grepl("cf.$", Species)) %>% # remover os cf. que estejam no final do nome
textclean::drop_row("Species", c("sp.","Rubiaceae", "Myrtaceae")) %>% # remove os 3 elementos listados
filter(`freq` > 0) %>% # remove as espécies que foram preenchidas por outro grupo funcional
# e mantém só aquelas que estão representadas pelo grupo funcional correto
mutate(prop = ((freq*100))/sum(freq)) %>% #faz um calculo de proporção de individuos por spp e salva em uma coluna
mutate(bolean = prop >= 1) %>% # preenche uma coluna com oque está acima de 1% de contribuição
arrange(prop) # organizada em ordem
#textclean::drop_row("bolean", "FALSE") # remove tudo oque for FALSE da coluna bolean
listaspcclf.c
sum(listaspcclf.c$freq)
listaspcclf.c$subtr <- (listaspcclf.c$freq-listaspcclf$freq)
library(tidyverse)
library(textclean)
library(vegan)
library(ggpubr)
library(gridExtra)
library(gtable)
library(grid)
data_biota <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv", locale = locale(encoding = "ASCII")) # If all the columns is imported as agregated, try to load with read_csv2 function
glimpse(data_biota)
data.biota.div.tre.o <- data_biota %>%
dplyr::select(-c(1,5,23:26)) %>% # remove unused columns
gather(key = "Month", value = "value", 4:20) %>% # convert the information from columns 4 to 20 in the columns "time" (month data) and column "value", that contains the record of each individual
rename(life_form = `Life Form`) %>%
filter(Treatment == "open", life_form == "tree") %>%
dplyr::mutate(time = as.numeric(Month %>% stringr::str_replace("p", ""))) %>%
dplyr::group_by(Treatment, time, Species) %>% # create a group that will be used to calculate species abundances
summarise(abundances = sum(value)) %>%  # create a 'abundances' column of each individual grouped by Site, Plot, Treatment and Month
dplyr::mutate(Species = Species %>%
stringr::str_replace(" cf. ", "..")) %>% # this function substitute " cf. " for " " between Genus and species names.
dplyr::mutate(Species = Species %>%
stringr::str_replace(" ", ".")) %>%
textclean::drop_row("Species", c("Indeterminate")) %>%  # this function removes all rows that contain "indeterminate" in the name, from the column "Species" or ("species_new").
textclean::drop_row("Species", c("sp.", "cf.", "aff.")) %>%
dplyr::ungroup(Treatment, time, Species) %>%
dplyr::select(c(2:4)) %>%
mutate_all(replace_na, 0)
data.biota.div.tre.o
View(data.biota.div.tre.o)
data.biota.div.tre.o.time <- data.biota.div.tre.o %>%
filter(time == 96)
data.biota.div.tre.o.time
View(data.biota.div.tre.o.time)
data.biota.div.tre.c <- data_biota %>%
dplyr::select(-c(1,5,23:26)) %>% # remove unused columns
gather(key = "Month", value = "value", 4:20) %>% # convert the information from columns 4 to 20 in the columns "time" (month data) and column "value", that contains the record of each individual
rename(life_form = `Life Form`) %>%
filter(Treatment == "closed", life_form == "tree") %>%
dplyr::mutate(time = as.numeric(Month %>% stringr::str_replace("p", ""))) %>%
dplyr::group_by(Treatment, time, Species) %>% # create a group that will be used to calculate species abundances
summarise(abundances = sum(value)) %>%  # create a 'abundances' column of each individual grouped by Site, Plot, Treatment and Month
dplyr::mutate(Species = Species %>%
stringr::str_replace(" cf. ", "..")) %>% # this function substitute " cf. " for " " between Genus and species names.
dplyr::mutate(Species = Species %>%
stringr::str_replace(" ", ".")) %>%
textclean::drop_row("Species", c("Indeterminate")) %>%  # this function removes all rows that contain "indeterminate" in the name, from the column "Species" or ("species_new").
textclean::drop_row("Species", c("sp.", "cf.", "aff.")) %>%
dplyr::ungroup(Treatment, time, Species) %>%
dplyr::select(c(2:4)) %>%
mutate_all(replace_na, 0)
data.biota.div.tre.c
data.biota.div.tre.c.time <- data.biota.div.tre.c %>%
filter(time == 96)
View(data.biota.div.tre.c.time)
View(data.biota.div.tre.o.time)
data.biota.div.tre.c.time.0 <- data.biota.div.tre.c %>%
filter(time == 0)
View(data.biota.div.tre.c.time.0)
data.biota.div.tre.c.time.0 <- data.biota.div.tre.c %>%
filter(time == 6)
data.biota.div.tre.c
data.biota.div.tre.c.time.0 <- data.biota.div.tre.c %>%
filter(time == 06)
View(data.biota.div.tre.c.time.0)
View(listaspcclf.c)
View(listaspcclf)
View(data.biota.div.tre.c.time)
View(data.biota.div.tre.c.time)
View(data.biota.div.tre.c.time.0)
View(data.biota.div.tre.o.time)
View(data.biota.div.tre.o)
View(data.biota.div.tre.c.time)
View(data.biota.div.tre.c.time.0)
# Load packages and open datatable -------------------------------------
if(!require("tidyverse")) install.packages("tidyverse", dependencies = TRUE)
if(!require("textclean")) install.packages("textclean", dependencies = TRUE)
data.biota <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
rel.abun <- data.biota %>%
rename(life_form = `Life Form`) %>%
textclean::drop_row("life_form", c("indeterminate")) %>%
gather(key = "Month", value = "value", 6:22) %>%
mutate(time = Month %>% stringr::str_replace("p", "")) %>%
mutate(Treatment = factor(Treatment)) %>%
mutate(Treatment = fct_relevel(Treatment, "open", "closed")) %>%
mutate(Treatment = recode(Treatment, "open" = "Open", "closed" = "Closed")) %>%
mutate(life_form = fct_relevel(life_form, "tree", "palm","liana","shrub","herb","bamboo")) %>%
mutate(life_form = recode(life_form, "tree" = "Trees", "palm" = "Palms","liana" = "Lianas","shrub" = "Shrubs","herb" = "Herbs","bamboo" = "Bamboos")) %>%
dplyr::group_by(Treatment, Month, time, life_form) %>%
summarise(abs.abun = sum(value)) %>%
group_by(time, Treatment) %>% mutate(rel.abun = abs.abun / sum(abs.abun))
rel.abun
View(data.biota)
rel.abun <- data.biota %>%
rename(life_form = `Life Form`) %>%
textclean::drop_row("life_form", c("indeterminate")) %>%
gather(key = "Month", value = "value", 6:22) %>%
filter(life_form = `herb`) %>%
dplyr::group_by(Treatment, Month, time, Species) %>%
summarise(abs.abun = sum(value)) %>%
group_by(time, Treatment, Species) %>% mutate(rel.abun = abs.abun / sum(abs.abun))
rel.abun <- data.biota %>%
rename(life_form = `Life Form`) %>%
textclean::drop_row("life_form", c("indeterminate")) %>%
gather(key = "Month", value = "value", 6:22) %>%
filter(life_form == `herb`) %>%
dplyr::group_by(Treatment, Month, time, Species) %>%
summarise(abs.abun = sum(value)) %>%
group_by(time, Treatment, Species) %>% mutate(rel.abun = abs.abun / sum(abs.abun))
rel.abun <- data.biota %>%
rename(life_form = `Life Form`) %>%
textclean::drop_row("life_form", c("indeterminate")) %>%
gather(key = "Month", value = "value", 6:22) %>%
filter(life_form == `herbs`) %>%
dplyr::group_by(Treatment, Month, time, Species) %>%
summarise(abs.abun = sum(value)) %>%
group_by(time, Treatment, Species) %>% mutate(rel.abun = abs.abun / sum(abs.abun))
rel.abun <- data.biota %>%
rename(life_form = `Life Form`) %>%
textclean::drop_row("life_form", c("indeterminate")) %>%
gather(key = "Month", value = "value", 6:22) %>%
filter(life_form == "shrub") %>%
dplyr::group_by(Treatment, Month, time, Species) %>%
summarise(abs.abun = sum(value)) %>%
group_by(time, Treatment, Species) %>% mutate(rel.abun = abs.abun / sum(abs.abun))
rel.abun <- data.biota %>%
rename(life_form = `Life Form`) %>%
textclean::drop_row("life_form", c("indeterminate")) %>%
gather(key = "Month", value = "value", 6:22) %>%
filter(life_form == "shrub") %>%
dplyr::group_by(Treatment, Month, Species) %>%
summarise(abs.abun = sum(value)) %>%
group_by(Month, Treatment, Species) %>% mutate(rel.abun = abs.abun / sum(abs.abun))
rel.abun
View(rel.abun)
rel.abun <- data.biota %>%
rename(life_form = `Life Form`) %>%
textclean::drop_row("life_form", c("indeterminate")) %>%
gather(key = "Month", value = "value", 6:22) %>%
filter(Treatment == "closed", life_form == "shrub") %>%
dplyr::group_by(Treatment, Month, Species) %>%
summarise(abs.abun = sum(value)) %>%
group_by(Month, Treatment, Species) %>% mutate(rel.abun = abs.abun / sum(abs.abun))
rel.abun.c <- data.biota %>%
rename(life_form = `Life Form`) %>%
textclean::drop_row("life_form", c("indeterminate")) %>%
gather(key = "Month", value = "value", 6:22) %>%
filter(Treatment == "closed", life_form == "shrub") %>%
dplyr::group_by(Treatment, Month, Species) %>%
summarise(abs.abun = sum(value)) %>%
group_by(Month, Treatment, Species) %>% mutate(rel.abun = abs.abun / sum(abs.abun))
rel.abun.c
rel.abun.o <- data.biota %>%
rename(life_form = `Life Form`) %>%
textclean::drop_row("life_form", c("indeterminate")) %>%
gather(key = "Month", value = "value", 6:22) %>%
filter(Treatment == "open", life_form == "shrub") %>%
dplyr::group_by(Treatment, Month, Species) %>%
summarise(abs.abun = sum(value)) %>%
group_by(Month, Treatment, Species) %>% mutate(rel.abun = abs.abun / sum(abs.abun))
rel.abun.o
View(rel.abun.c)
View(rel.abun.o)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(plyr)
library(textclean)
library(beepr)
library(viridis)
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,23:24] <- lapply(ttlplt[,23:24], as.numeric)
ttlplt
View(ttlplt)
listaspcc <- ttlplt %>%
filter_row("Species", c("sp.", "cf.", "aff.", "Euterpe edulis")) %>%
select(-c(1,3,5:26,28))
listaspcc
listaspcc <- plyr::count(listaspcc$Species)
listaspcc
sum(listaspcc$freq)
library(tidyverse)
library(dplyr)
library(plyr)
library(textclean)
library(beepr)
library(viridis)
ttlplt <- read_csv("C:/Users/Yuri/Google Drive/Yuri/Mestrado/parcelas_biota/projeto/PPG/tese/analises/01_dados/padrao/life_form_yuri_2019v2.csv")
ttlplt[,23:24] <- lapply(ttlplt[,23:24], as.numeric)
ttlplt
listaspcc <- ttlplt %>%
group_by(Site, Plot, Treatment, Species)
View(listaspcc)
View(ttlplt)
listaspcc <- ttlplt %>%
group_by(Site, Plot, Treatment, Species)
listaspcc <- ttlplt %>%
group_by(Site, Plot, Treatment, Species) %>%
select(c(2:4,27))
listaspcc
count(count(baseball[1:100,], c("id", "year")), "id", "freq")
count(count(listaspcc, c("Site","Plot","Treatment","Species")),
"Site","Plot","Treatment","Species")
count(count(listaspcc, c("Site","Plot")),
"Site","Plot")
count(count(listaspcc, c("Site","Plot","Treatment")),
"Site","Plot","Treatment","Species")
count(count(listaspcc, c("Site","Plot","Treatment")),
"Site","Plot","Treatment")
listaspcc <- ttlplt %>%
group_by(Site, Plot, Treatment, Species) %>%
mutate(unique_types = n_distinct(Speces)) %>%
select(c(2:4,27))
listaspcc <- ttlplt %>%
group_by(Site, Plot, Treatment, Species) %>%
mutate(unique_types = n_distinct(Species)) %>%
select(c(2:4,27))
listaspcc
listaspcc <- ttlplt %>%
select(c(2:4,27)) %>%
group_by(Site, Plot, Treatment, Species) %>%
mutate(unique_types = n_distinct(Species))
listaspcc
View(listaspcc)
listaspcc <- ttlplt %>%
select(c(2:4,27)) %>%
group_by(Site, Plot, Treatment) %>%
mutate(unique_types = n_distinct(Species))
listaspcc
listaspcc <- ttlplt %>%
select(c(2:4,27)) %>%
mutate(unique_types = n_distinct(Species))
listaspcc
listaspcc <- ttlplt %>%
select(c(2:4,27)) %>%
group_by(Site, Plot, Treatment) %>%
summarise(Freq=n())
listaspcc <- ttlplt %>%
select(c(2:4,27)) %>%
group_by(Site, Plot, Treatment, Species) %>%
summarise(Freq=n())
listaspcc <- ttlplt %>%
select(c(2:4,27)) %>%
group_by(Site, Plot, Treatment, Species) %>%
summarise(Species=n())
listaspcc <- ttlplt %>%
select(c(2:4,27)) %>%
group_by(Site, Plot, Treatment, Species) %>%
summarise(Freq=n(Species))
listaspcc <- ttlplt %>%
select(c(2:4,27)) %>%
group_by(Site, Plot, Treatment, Species) %>%
summarise(Freq=n())
listaspcc
listaspcc <- ttlplt %>%
select(c(2:4,27)) %>%
group_by(Site, Plot, Treatment, Species) %>%
summarise(Freq=n())
listaspcc <- ttlplt %>%
select(c(2:4,27)) %>%
group_by(Site, Plot, Treatment) %>%
summarise(Freq=n())
